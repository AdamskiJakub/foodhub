generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String   @id @default(cuid())  
  name          String?
  email         String  @unique
  emailVerified DateTime?
  image         String?
  password      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
  ratings       Rating[]
}


model Restaurant {
  id                  Int       @id @default(autoincrement())
  osmId               String    @unique // ID z OpenStreetMap
  name                String
  city                String
  country             String    @default("PL")
  street              String
  housenumber         String?
  postcode            String?
  cuisine             String?
  email               String?
  phone               String?
  website             String?
  operator            String?
  openingHours        String?
  coordinates         Json?
  building            String?   
  buildingLevels      String?   
  buildingMaterial    String?   
  checkDate           String?   
  outdoorSeating      Boolean?  
  smoking             String?   
  takeaway            Boolean?  
  delivery            Boolean?  
  wheelchair          String?   
  reservation         Boolean?  
  paymentMethods      Json?     
  contactEmail        String?   
  contactFacebook     String?   
  contactInstagram    String?   
  contactMobile       String?   
  contactWebsite      String?   
  officialName        String?   
  dietVegetarian      Boolean?  
  createdAt           DateTime  
  updatedAt           DateTime 
  comments            Comment[]
  ratings             Rating[]
}

model Comment {
  id           Int       @id @default(autoincrement())
  content      String
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Rating {
  id           Int       @id @default(autoincrement())
  value        Int       // from 1 to 5 ( validate in application )
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}